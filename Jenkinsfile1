pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5')) // Keep only the last 5 builds
        timestamps() // Add timestamps to logs
    }

    tools {
        nodejs 'NodeJS' // Replace 'NodeJS-20' with the name of your NodeJS tool in Jenkins
    }

    stages {
        stage('Preparation') {
            steps {
                echo "Starting the pipeline for ${env.JOB_NAME}"
                sh 'node --version' // Verify Node.js version
                sh 'npm --version'  // Verify npm version
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "Installing project dependencies..."
                sh 'npm install' // Install dependencies
            }
        }

        stage('Build') {
            steps {
                echo "Building the React.js project..."
                sh 'npm run build' // Build the project
            }
        }

        stage('SonarQube Scan') {
            steps {
                echo "Starting SonarQube scan..."
                withSonarQubeEnv('SonarQube') { // Use the configured SonarQube environment 'SonarQube'
                    sh '''
                        npx sonar-scanner \
                        -Dsonar.projectKey=Portfolio \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=http://34.87.163.238:9000 \
                        -Dsonar.token=sqp_274673b02985fa2924d4bc517680170c8ecd9388
                    ''' // Run SonarQube analysis for JavaScript
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    echo "Waiting for SonarQube quality gate results..."
                    timeout(time: 30, unit: 'MINUTES') { // Set a timeout of 30 minutes
                        def qualityGate = waitForQualityGate() // Wait for the quality gate results
                        if (qualityGate.status != 'OK') {
                            error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                        }
                    echo "SonarQube analysis results available at: ${env.componentName}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully for >>> ${env.componentName}."
        }
        failure {
            echo "❌ Pipeline failed. Check logs for details. >>> ${env.componentName}"
        }
        always {
            echo "Pipeline execution finished."
        }
    }
}
